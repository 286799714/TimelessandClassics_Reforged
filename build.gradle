import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.codehaus.groovy:groovy-all:2.4.15'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

version = "0.3.10.1-g-1.18.2"
group = "com.tac"
archivesBaseName = "tac"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()
jarJar.fromRuntimeConfiguration()

//sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "tac.refmap.json"
    config "tac.mixins.json"
}

minecraft {
    mappings channel: 'official', version: '1.18.2'

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                tac {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                tac {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'tac', '--all', '--output', file('src/generated/resources/')
            mods {
                tac {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'

    implementation fg.deobf('curse.maven:framework-549225:3723144')
    compileOnly fg.deobf("curse.maven:valkyrien-skies-258371:4794551")
    //implementation fg.deobf('curse.maven:rubidium-574856:4494903')
    //implementation fg.deobf('curse.maven:oculus-581495:4578744')
    //implementation fg.deobf('curse.maven:ysm-784675:4667056')

    minecraftLibrary(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '[2.14.2,2.16.0)')
    minecraftLibrary(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '[2.14.2,2.16.0)')
    minecraftLibrary(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '[2.14.2,2.16.0)')

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

repositories {
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    flatDir {
        dir 'libs'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "Timeless and Classics",
                "Specification-Vendor": "TaC Squad",
                "Specification-Version": "0.04",
                "Implementation-Title": "Timeless and Classics",
                "Implementation-Version": project.version,
                "Implementation-Vendor" : "TaC Squad",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "tac.mixins.json"
        ])
    }
}

jarJar {
    dependencies {
        include(dependency("com.fasterxml.jackson.core:jackson-databind"))
        include(dependency("com.fasterxml.jackson.core:jackson-annotations"))
        include(dependency("com.fasterxml.jackson.core:jackson-core"))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

reobf {
    jarJar {} // Re-obfuscate
}

jar.finalizedBy('reobfJar')
getTasksByName('jarJar', false).forEach(t -> {t.finalizedBy('reobfJarJar')})